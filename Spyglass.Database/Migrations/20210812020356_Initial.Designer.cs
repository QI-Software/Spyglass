// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Spyglass.Database;
using Spyglass.Database.Moderation;

namespace Spyglass.Database.Migrations
{
    [DbContext(typeof(SpyglassContext))]
    [Migration("20210812020356_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "BlacklistType", new[] { "mod_mail" })
                .HasPostgresEnum(null, "InfractionType", new[] { "Note", "Warn", "Mute", "Kick", "Ban", "Unmute", "Unban", "Undeafen" })
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.HasSequence<int>("Moderation.BlacklistedUsers_ID_seq")
                .StartsAt(0L)
                .HasMin(0L);

            modelBuilder.HasSequence<int>("Moderation.Infractions_ID_seq")
                .StartsAt(0L)
                .HasMin(0L);

            modelBuilder.HasSequence<int>("Moderation.Ongoing_ID_seq")
                .StartsAt(0L)
                .HasMin(0L);

            modelBuilder.HasSequence<int>("Moderation.ReactionRole_ID_seq")
                .StartsAt(0L)
                .HasMin(0L);

            modelBuilder.Entity("Spyglass.Database.Moderation.BlacklistedUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"Moderation.BlacklistedUsers_ID_seq\"'::regclass)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<long>("StaffId")
                        .HasColumnType("bigint");

                    b.Property<BlacklistType>("Type")
                        .HasColumnType("\"BlacklistType\"");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Moderation.BlacklistedUsers");
                });

            modelBuilder.Entity("Spyglass.Database.Moderation.Infraction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"Moderation.Infractions_ID_seq\"'::regclass)");

                    b.Property<DateTimeOffset?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<long>("StaffId")
                        .HasColumnType("bigint");

                    b.Property<string>("StaffName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<InfractionType>("Type")
                        .HasColumnType("\"InfractionType\"");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Moderation.Infractions");
                });

            modelBuilder.Entity("Spyglass.Database.Moderation.OngoingModeration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"Moderation.Ongoing_ID_seq\"'::regclass)");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LinkedInfractionId")
                        .HasColumnType("bigint");

                    b.Property<InfractionType>("Type")
                        .HasColumnType("\"InfractionType\"");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("LinkedInfractionId");

                    b.ToTable("Moderation.Ongoing");
                });

            modelBuilder.Entity("Spyglass.Database.ReactionRoles.ReactionRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"Moderation.ReactionRole_ID_seq\"'::regclass)");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("ReactionId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("ReactionName")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Utilities.ReactionRole");
                });

            modelBuilder.Entity("Spyglass.Database.Moderation.OngoingModeration", b =>
                {
                    b.HasOne("Spyglass.Database.Moderation.Infraction", "LinkedInfraction")
                        .WithMany()
                        .HasForeignKey("LinkedInfractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedInfraction");
                });
#pragma warning restore 612, 618
        }
    }
}
